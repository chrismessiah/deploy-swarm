- hosts: managers
  become: yes
  gather_facts: false
  tasks:
    - name: get docker networks
      shell: docker network ls -f name=encovnet1 -q
      register: dock_net

    - name: register overlay network
      when: dock_net.stdout == ""
      shell: docker network create --opt encrypted -d overlay --attachable encovnet1

    # - name: Create a network with driver options
    #   docker_network:
    #     name: encovnet1
    #     driver: overlay
    #     attachable: true
    #     driver_options:
    #       com.docker.network.bridge.name: net2

- hosts: all
  become: yes
  gather_facts: false
  tasks:
    - name: install PIP
      apt:
        name: ["python3-pip"]
        state: present
        update_cache: true

    - name: install python modules
      pip:
        name:
          - pystache
          - docker

    - name: Creates nginx-cert Dockerfile dir
      file:
        path: ~/nginx-cert
        state: directory

    - name: send nginx Dockerfile
      copy:
        src: ../assets/nginx/Dockerfile
        dest: ~/nginx-cert/Dockerfile

    - name: build nginx-cert
      docker_image:
        build:
          path: nginx-cert/
        name: nginx-cert
        source: build

    - name: Create nginx container
      docker_container:
        name: nginx-cert
        image: nginx-cert
        state: started
        purge_networks: yes
        networks:
          - name: encovnet1
        ports:
          - "80:80"
          - "443:443"
        volumes:
          - /etc/letsencrypt/:/etc/letsencrypt/
          - /etc/nginx/conf.d:/etc/nginx/conf.d

    - name: Create hello-world container
      docker_container:
        name: hello-world
        image: chrismessiah/hello-world
        state: started
        purge_networks: yes
        networks:
          - name: encovnet1

    - name: send nginx template file
      copy:
        src: ../assets/nginx/template.conf.nginx
        dest: /etc/nginx/conf.d/template.conf.nginx

    - name: get IP
      when: use_nip_domain is defined and use_nip_domain == "true"
      shell: ifconfig eth0 | grep 'inet ' | awk '{print $2}'
      register: ip

    - name: set domain
      when: use_nip_domain is defined and use_nip_domain == "true"
      set_fact: domain={{ ip.stdout }}.nip.io

    - name: get letsencrypt cert
      shell: docker exec nginx-cert certbot certonly --nginx --register-unsafely-without-email --agree-tos -d {{ domain }} >> certbot.log
      args:
        chdir: $HOME
        creates: certbot.log

    - name: Create nginx config for a site
      shell: pystache "$(cat template.conf.nginx)" '{"domain":"{{ domainÂ }}","internal_url":"http://hello-world:3000"}' >> site1.conf
      args:
        chdir: /etc/nginx/conf.d/
        creates: site1.conf

    - name: restart nginx container
      docker_container:
        name: nginx-cert
        image: nginx-cert
        state: started
        purge_networks: yes
        networks:
          - name: encovnet1
        restart: yes
        ports:
          - "80:80"
          - "443:443"
        volumes:
          - /etc/letsencrypt/:/etc/letsencrypt/
          - /etc/nginx/conf.d:/etc/nginx/conf.d
